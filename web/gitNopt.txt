
//添加文件：
1.$git add <file>
2.$git commit -m "xxx"

可add多个文件后，在进行commit提交，-m后是本次提交的说明

//查看仓库状态
1.$git status

一般有三种情况：1、有修改的东西，但未准备提交，可以用$git diff查看修改内容【二进制内容一般只能知道经过修改，不能知道修改内容】；changes not staged for commit
				2、通过$git add <file> 状态会变为准备提交状态; changes to be committed
				3、通过$git commit -m"xxx" 后，状态变为无任何修改文件  nothing to commit,working directory clean
				
//查看仓库版本 在版本之间穿梭
$git log
$git reset --hard commit_id
$cat <file>
$git reflog 

1、HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令$git reset --hard commit_id。【HEAD^:上一个版本，HEAD^^类推】
2、穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
3、要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。


//缓存区概念
前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。

//Git的跟踪修改
Git是如何跟踪修改的，每次修改，如果不add到暂存区，那就不会加入到commit中。
如果add之后，再修改，然后直接commit，是不会提交第二次修改的！
如果add之后，再修改，再add，然后commit，会把两次修改合并提交！

//撤销修改
[忘记怎么写，用git status一般都有提示]
$git checkout --file [--是必不可少，-就变成切换分支了]
命令git checkout -- file意思就是，把文件在工作区的修改全部撤销，这里有两种情况：
一种是file自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是file已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态

用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
小结时间。

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

//删除
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

正确删除：$git rm <file> -----> $git commit
错误删除未提交：$git checkout --<file>


//分支的创建与管理
Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>


//非快速合并
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
用git log --graph命令可以看到分支合并图
	